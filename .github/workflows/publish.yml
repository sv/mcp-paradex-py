name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: "3.10"
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv pip install build hatchling twine
        uv pip install -e ".[dev]"
    
    - name: Run quality checks
      run: |
        uv run black --check src tests
        uv run ruff check src tests
    
    - name: Run tests
      run: uv run pytest --cov=mcp_paradex
    
    - name: Build package
      run: uv build
    
    - name: Check package
      run: uv run twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Using trusted publishing (no API token needed)
        # Configure this at https://pypi.org/manage/account/publishing/
        repository-url: https://upload.pypi.org/legacy/
        print-hash: true
        
  test-install:
    needs: publish
    runs-on: ubuntu-latest
    steps:
    - name: Extract version from tag
      id: version
      run: |
        # Extract version from GITHUB_REF (e.g., refs/tags/v0.1.1 -> 0.1.1)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Installing version: ${VERSION}"
      
    - name: Wait for PyPI propagation
      run: sleep 120  # Increased to 2 minutes for better reliability
      
    - name: Install specific version from PyPI
      run: |
        # Install the exact version that was just published
        pip install mcp-paradex==${{ steps.version.outputs.version }}
      
    - name: Test installation
      run: |
        # Test imports first
        python -c "import mcp_paradex; print('Package imported successfully')"
        
        # Verify correct version is installed
        python -c "import mcp_paradex; print(f'Installed version: {mcp_paradex.__version__ if hasattr(mcp_paradex, \"__version__\") else \"unknown\"}')"
        
        # Show where the CLI script is installed
        which mcp-paradex || echo "mcp-paradex not found in PATH"
        
        # Try running with python -m
        python -m mcp_paradex --help