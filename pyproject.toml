[project]
name = "mcp-paradex"
dynamic = ["version"]
description = "MCP server for Paradex trading platform integration"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "mcp[cli]>=1.10.1",
    "paradex-py>=0.4.6",
    "pydantic>=2.11.0",
    "uvicorn>=0.35.0",
    "python-dotenv>=1.0.1",
    "argparse>=1.4.0",
    "aiohttp>=3.12.0",
    "jmespath>=1.0.1",
]

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "ruff>=0.11.2",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
]

[project.scripts]
mcp-paradex = "mcp_paradex.server.server:run_cli"

[project.entry-points."mcp.server"]
paradex = "mcp_paradex.server.server:server"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_paradex"]

[tool.hatch.version]
path = "src/mcp_paradex/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
  "/src",
  "/tests",
  "/README.md",
  "/LICENSE",
  "/pyproject.toml",
]


[tool.black]
line-length = 100
target-version = ["py310"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "W",   # pycodestyle warnings
    "C90", # mccabe complexity
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "E402",  # module level import not at top
    "F403",  # star imports
    "F401",  # unused imports (needed for registration)
    "F841",  # local variable assigned but not used
    "ARG001", # unused function argument (ctx is required by MCP)
    "PTH100", # os.path usage (needed for compatibility)
    "PTH120", # os.path.dirname usage
    "RUF013", # implicit optional
    "B904",  # raise without from
]

[tool.ruff.lint.isort]
known-first-party = ["mcp_paradex"]
known-third-party = ["mcp", "paradex_py", "pydantic"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["paradex_py.*", "mcp.*", "pydantic.*"]
ignore_missing_imports = true
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "--cov=mcp_paradex --cov-report=term-missing"
